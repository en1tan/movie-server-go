basePath: /api
definitions:
  Movie:
    properties:
      _id:
        readOnly: true
        type: string
      createdAt:
        readOnly: true
        type: string
      genre:
        type: string
      imdbid:
        type: string
      link:
        type: string
      poster:
        type: string
      title:
        type: string
      type:
        type: string
      updatedAt:
        readOnly: true
        type: string
      year:
        type: string
    required:
    - genre
    - imdbid
    - link
    - poster
    - title
    - type
    - year
    type: object
  ResponseError:
    properties:
      message:
        type: string
      status:
        default: false
        type: boolean
      statusCode:
        type: integer
    type: object
  SuccessReponseForArrayOfMovies:
    properties:
      data:{movies}:
        items:
          $ref: '#/definitions/Movie'
        type: array
      message:
        type: string
      page:
        type: integer
      status:
        default: true
        type: boolean
      statusCode:
        type: integer
      total:
        type: integer
    type: object
  SuccessResponseForMovie:
    properties:
      data:
        $ref: '#/definitions/Movie'
      message:
        type: string
      status:
        default: true
        type: boolean
      statusCode:
        type: integer
    type: object
info:
  contact: {}
  description: Movie Server written in go
  license:
    name: MIT
  termsOfService: http://#
  title: Movie Server API
  version: "1.0"
paths:
  /movies:
    get:
      operationId: ListMovies
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SuccessReponseForArrayOfMovies'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Lists all the movies
      tags:
      - Movie
    post:
      operationId: CreateMovie
      parameters:
      - description: New Movie
        in: body
        name: Movie
        required: true
        schema:
          $ref: '#/definitions/Movie'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/SuccessResponseForMovie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create New Movie
      tags:
      - Movie
  /movies/{id}:
    delete:
      operationId: DeleteMovie
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Movie Deleted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Delete Movie by ID
      tags:
      - Movie
    get:
      operationId: GetMovieByID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponseForMovie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get Movie by ID
      tags:
      - Movie
    put:
      operationId: UpdateMovieByID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: string
      - description: Movie
        in: body
        name: Movie
        required: true
        schema:
          $ref: '#/definitions/Movie'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponseForMovie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update Movie Details
      tags:
      - Movie
swagger: "2.0"
